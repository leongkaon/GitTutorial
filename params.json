{
  "name": "Git -- Basic",
  "tagline": "Git Tutorial For YueTeam",
  "body": "# 前言碎碎念\r\n\r\nHi，余團隊的各位，我是敬昇，終於把積欠已久的**Git上手教材**生出來啦。雖然Git與GitHub對各位為**非必備**的使用工具，但許多外國知名學校與課程已將Git納入課程當中，如：[UC-Berkley Stat. MA](http://statistics.berkeley.edu/computing/git)、[Coursera](https://zh-tw.coursera.org/specializations/jhu-data-science)、[DATAQUEST](https://www.dataquest.io/track/data-scientist-track)，由此可見，在外國的統計、資料科學方面的課程中，相當重視Git這個熱門的版本控制工具。  \r\n  \r\n在學習Git前，我常常在思考Git這個工具對我們有什麼用處？我想**目前**的用處不外乎下列兩點：  \r\n\r\n* Shiny Server 開發版本控制\r\n* 靜態網頁的呈現 (By GitHub pages)  \r\n  \r\n隨著團隊Shiny-Server、Dashboard的問世，在小組開發Shiny App過程中，需要大量的修改代碼與佈署(Deploy)Shiny App，合作開發中如果版本沒有控制好，可能會有悲劇慘案的發生！（如App無限Error卻也抓不出原因）  \r\n  \r\n另外透過GitHub pages，我們可以很輕易的將網頁內容(如html file)放在Github上，使我們可以輕易的將網站呈現給其他人！如：個人自傳、個人履歷、Rmd分析的報告、R Slide。\r\n  \r\n但目前僅研究Git了基本入門與簡單應用，一方面是因為時間不夠、另一方面是覺得目前需求還不大，若Git對於余團隊未來相當重要了話，在有請各位幫忙補充更多的內容進去吧！因此本份教材僅提供**簡易入門上手**、**建議學習資源**這兩部分，若時間允許未來我會在新增些內容！  \r\n  \r\n本篇在於**快速上手**四字，因此會大量地用一些譬喻的方式去幫助各位了解（也就是~~非常不專業~~、而且有可能會有誤導XDD），若有譬喻錯誤的部份在提出來讓我知道，幫助我修正內容吧！  \r\n另外，毫無意外的，此教材我目前只提供Mac版本..... Windows有請幫手幫我翻譯吧！\r\n\r\n# Git安裝設置與應用\r\n\r\n安裝過程可以分為以下階段，時間約莫10~15分鐘。\r\n\r\n> Git安裝設置\r\n\r\n1. 安裝Git\r\n2. GitHub帳號建立\r\n3. Git設定帳號\r\n4. SSH Key建立\r\n5. 加入SSH Key 至 GitHub帳號\r\n6. 測試 SSH Key\r\n7. 安裝GitHub Desktop\r\n\r\n> GitHub應用與練習\r\n\r\n1. GitHub Desktop - Add、Clone 練習\r\n3. GitHub Pages練習\r\n3. 練習建立一個分析結果至Github Pages！\r\n\r\n## 安裝Git\r\n\r\nGit安裝上非常簡單，我們只需要至[官網](https://git-scm.com/download/mac)、點選`maintained build`下載安裝檔並且執行就可以囉！  \r\n  \r\nGit安裝完後會存在我們電腦中，他就像是一個你的手下(程式)，會為你監視任何你有興趣的人(資料夾、檔案)，監視他的一舉一動(新增、刪除、修改、...)。如果你叫他監視你的一個存放`R Script`的資料夾，他會為你監視資料夾內的`R Script`的任何異動，在每一個**提交的時間點**(Commit的概念，晚點提到)。\r\n\r\n## Git設定帳號\r\n\r\n在開始進行一些Git的初始設定之前，我們需要先到[GitHub官網](https://github.com/)辦一個GitHub帳號，並且完成認證！  \r\nGitHub就像是Git的網路存放處，若沒有GitHub，Git所監視的對象則無法分享給除了你以外的人知道，所以我們要打通Git與GitHub之間的橋樑。但目前雖然有了Git跟GitHub，但他們兩個卻無法成功認得對方，接下來就讓他們兩個相認！\r\n  \r\n安裝完Git之後請打開`Terminal(終端機)`。接下來我們要進行一些Git的初始設定：  \r\n\r\n\r\n> 告訴Git你是誰！  (YOUR NAME可以隨意填寫、YOUR EMAIL ADDRESS請填寫你申請GitHub的帳號)  \r\n\r\n```\r\ngit config --global user.name \"YOUR NAME\"\r\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\r\n```\r\n\r\n## SSH Key建立\r\n\r\n安裝完Git、辦完GitHub帳號後，我們也讓Git知道我們是誰了，接下來要讓Git跟GitHub彼此相認！  \r\n  \r\n> 首先我們需要**產生**一把相認的鑰匙(SSH KEY)，讓Git跟GitHub可以互通往來。(your_email@example.com 填成剛剛註冊GitHub的email)  \r\n\r\n```\r\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\r\n```\r\n\r\n> 顯示以下資訊，按一下Enter\r\n\r\n```\r\nEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\r\n```\r\n\r\n> 打一組你常用的密碼，之後會需要這組密碼！  \r\n\r\n```\r\nEnter passphrase (empty for no passphrase): [Type a passphrase]\r\nEnter same passphrase again: [Type passphrase again]\r\n```\r\n\r\n## 加入SSH Key 至 GitHub帳號\r\n\r\n雖然順利產生了一把鑰匙，但我們會需要把鑰匙存放到對的管理室，讓Git這個手下知道當他要找GitHub時候，去哪裡拿這把鑰匙。  \r\n\r\n> 將鑰匙(SSH KEY)放置管理室  \r\n\r\n```\r\neval \"$(ssh-agent -s)\"\r\nssh-add ~/.ssh/id_rsa\r\n```\r\n\r\n好啦！現在Git已經知道去哪拿這把鑰匙去找GitHub了，但GitHub還不清楚這個Git是否室可信任的人阿！  \r\n所以我們需要打一副一樣的鑰匙放在GitHub那邊，讓他們兩個做相認！\r\n\r\n> 為了將這把鑰匙打一副，我們先複製到剪貼簿上  \r\n\r\n```\r\npbcopy < ~/.ssh/id_rsa.pub\r\n```\r\n\r\n> 在GitHub中加入這把鑰匙   \r\n\r\n開啟GitHub網站 --> 右上角點選自己 --> Setting --> 左邊點選SSH Key --> 右邊點選New SSH Key --> Title隨便打 --> 在Key那欄按`Cmd+V`--> Add SSH Key   \r\n\r\n好啦！這樣他們兩個已經可以相認囉！接下來測試一下\r\n\r\n\r\n## 測試 SSH Key\r\n\r\n> 在終端機輸入以下指令，成功了話會顯示Hi username! You've successfully authenticated, but GitHub does not provide shell access.  \r\n\r\n```\r\nssh -T unityculture@github.com\r\n```\r\n\r\n若有任何問題請參考[這篇](https://help.github.com/articles/testing-your-ssh-connection/)\r\n\r\n## 安裝GitHub Desktop\r\n## GitHub Desktop - Add、Clone 練習\r\n## GitHub Pages練習\r\n## 練習建立一個分析結果至Github Pages！",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}